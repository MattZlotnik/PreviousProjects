Log_Sales_time_series <- ts(Sales_table2[,3], frequency=4)
fit <- stl(Log_Sales_time_series, s.window=7)
plot(fit)
seasonal <- fit$time.series[,1]
seasonal
Sales_table2$A_stl <- exp(Sales_table2$LogSales - seasonal)
#
#   Plot seasonally adjusted values from stl
#
figure4 <- ggplot()
figure4 <- figure4 + geom_point(aes(x=Sales_table2$Time, y=Sales_table2$A_stl), color="Black")
figure4 <- figure4 + geom_line(aes(x=Sales_table2$Time, y=Sales_table2$A_stl), linetype=1, color="Black")
figure4 <- figure4 + scale_y_continuous()
figure4 <- figure4 + ggtitle("Seasonally adjusted sales using STL") + xlab("Time") + ylab("A")
print (figure4)
library(fpp2)
library(tseries)
library(marima)
library(arima)
install.packages("marima")
library(marima)
setwd("~/STA372.5/Project")
DataTable <- na.omit(read.csv("AllCoinHourly.csv", header = TRUE))
colnames(DataTable) <- c("Time", "BTC", "ETH", "LTC", "XRP")
head(DataTable)
tail(DataTable)
plot(DataTable$ETH, type = 'l', col = 'black')
lines(20*DataTable$BTC, col = 'red')
lines(77*DataTable$LTC, col = 'blue')
lines(19413*DataTable$XRP, col = 'green')
lines(DataTable$BTC/20, col = 'red')
lines((77/20)DataTable$LTC, col = 'blue')
lines((77/20)*DataTable$LTC, col = 'blue')
lines((19413/20)*DataTable$XRP, col = 'green')
plot(DataTable$BTC, type = 'l', col = 'black')
plot(DataTable$ETH, type = 'l', col = 'red')
plot(DataTable$LTC, type = 'l', col = 'blue')
plot(DataTable$XRP, type = 'l', col = 'green')
acf(DataTable$ETH, lag.max = 2000)
adf.test(DataTable$ETH)
plot(DataTable$ETH, type = 'l', col = 'black')
lines(DataTable$BTC/20, col = 'red')
lines((77/20)*DataTable$LTC, col = 'blue')
lines((19413/20)*DataTable$XRP, col = 'green')
acf(DataTable$ETH, lag.max = 2000)
adf.test(DataTable$ETH)
# fitting vs. validation data
fitsize = 6000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
head(fitData)
tail(fitData)
valData <- na.omit(DataTable[fitsize+1:valsize,])
head(valData)
tail(valData)
BTCarima <- auto.arima(fitData$BTC)
BTCarima
plot(forecast(BTCarima$fitted, h = valsize))
points(DataTable$BTC, pch = 20, col = 'red')
ETHarima <- auto.arima(fitData$ETH)
ETHarima
plot(forecast(ETHarima$fitted, h = valsize))
points(DataTable$ETH, pch = 20, col = 'red')
points(DataTable$ETH, pch = 20, col = 'green')
#Trying several sizes of validation sets and comparing predictive ability
fitsize = 9000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
head(fitData)
tail(fitData)
valData <- na.omit(DataTable[fitsize+1:valsize,])
head(valData)
tail(valData)
acf(ETHarima$residuals)
#Trying several sizes of validation sets and comparing predictive ability
fitsize = 9000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
valData <- na.omit(DataTable[fitsize+1:valsize,])
ETHarima2 <- auto.arima(fitData$ETH)
ETHarima2
plot(forecast(ETHarima2$fitted, h = valsize))
points(DataTable$ETH, pch = 20, col = 'green')
acf(ETHarima2$residuals)
plot(forecast(ETHarima2$fitted, h = valsize))
plot(forecast(ETHarima2$fitted, h = valsize), main = "Forecasts from ETS(2,1,2)")
plot(forecast(ETHarima$fitted, h = valsize), main = "Forecasts from ETS(5,1,0)")
ETHarima
# fitting vs. validation data
fitsize = 6000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
valData <- na.omit(DataTable[fitsize+1:valsize,])
ETHarima <- auto.arima(fitData$ETH)
ETHarima
plot(forecast(ETHarima$fitted, h = valsize), main = "Forecasts from ETS(2,1,0)")
points(DataTable$ETH, pch = 20, col = 'green')
plot(forecast(ETHarima2$fitted, h = valsize), main = "Forecasts from ETS(2,1,2)    Train/Test = (75/25)")
points(DataTable$ETH, pch = 20, col = 'green')
plot(forecast(ETHarima2$fitted, h = valsize), main = "Forecasts from ETS(2,1,2) Train/Test = (75/25)")
#Trying several sizes of validation sets and comparing predictive ability
fitsize = 9000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
valData <- na.omit(DataTable[fitsize+1:valsize,])
ETHarima2 <- auto.arima(fitData$ETH)
ETHarima2
plot(forecast(ETHarima2$fitted, h = valsize), main = "Forecasts from ETS(2,1,2) Train/Test = (75/25)")
points(DataTable$ETH, pch = 20, col = 'green')
plot(forecast(ETHarima2$fitted, h = valsize), main = "Forecasts from ETS(2,1,2)      Train/Test = (75/25)")
points(DataTable$ETH, pch = 20, col = 'green')
##11/1 split
fitsize = 11000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
head(fitData)
tail(fitData)
valData <- na.omit(DataTable[fitsize+1:valsize,])
head(valData)
tail(valData)
ETHarima2 <- auto.arima(fitData$ETH)
ETHarima3 <- auto.arima(fitData$ETH)
ETHarima3 <- auto.arima(fitData$ETH)
ETHarima3
plot(forecast(ETHarima3$fitted, h = valsize), main = "Forecasts from ETS(2,1,3)      Train/Test = (85/15)")
points(DataTable$ETH, pch = 20, col = 'green')
result <- auto.arima(y_time_series, xreg = DataTable$BTC + DataTable$LTC + DataTable$XRP)
y_time_series <- ts(DataTable$ETH)
result <- auto.arima(y_time_series, xreg = DataTable$BTC + DataTable$LTC + DataTable$XRP)
result
# fitting vs. validation data
fitsize = 6000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
y_time_series <- ts(fitData$ETH)
result <- auto.arima(y_time_series, xreg = fitData$BTC + fitData$LTC + fitData$XRP)
result
plot(forecast(result$fitted, h = valsize))
points(DataTable$ETH, pch = 20, col = 'green')
##Try to plot based on xreg of other coins
y_time_series <- ts(fitData$ETH)
result <- auto.arima(y_time_series, xreg = fitData$BTC)
result
plot(forecast(result$fitted, h = valsize))
points(DataTable$ETH, pch = 20, col = 'green')
##Try to plot based on xreg of other coins
y_time_series <- ts(log(fitData$ETH))
result <- auto.arima(y_time_series, xreg = fitData$BTC)
result
##Try to plot based on xreg of other coins
y_time_series <- ts(fitData$ETH)
result <- auto.arima(y_time_series, xreg = fitData$BTC)
result
plot(forecast(result$fitted, h = valsize))
points(DataTable$ETH, pch = 20, col = 'green')
resultBTC <- auto.arima(y_time_series, xreg = fitData$BTC)
fitData$BTC
# fitting vs. validation data
fitsize = 6000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
valData <- na.omit(DataTable[fitsize+1:valsize,])
##Try to plot based on xreg of other coins
y_time_series <- ts(fitData$ETH)
resultBTC <- auto.arima(y_time_series, xreg = fitData$BTC)
resultBTC
plot(forecast(resultBTC$fitted, h = valsize))
points(DataTable$ETH, pch = 20, col = 'green')
resultLTC <- auto.arima(y_time_series, xreg = fitData$LTC)
resultLTC
resultBTC
resultLTC
##Try to plot based on xreg of other coins
##Create lag_1 sets
table_lag1 <- DataTable[-1,]
table_lag1[,1] <- DataTable$ETH
add_row(table_lag1)
head(table_lag1)
table_lag1[,12967] <- c(0,0,0,0,0)
table_lag1[,12967] <- r(0,0,0,0,0)
##Try to plot based on xreg of other coins
##Create lag_1 sets
table_lag1 <- DataTable[-1,]
n<-dim(DataTable)[1]
DataTable<-DataTable[1:(n-1),]
table_lag1[,1] <- DataTable$ETH
head(table_lag1)
heaD(DataTable)
head(DataTable)
##Try to plot based on xreg of other coins
##Create lag_1 sets
table_lag1 <- DataTable[-3,]
n<-dim(DataTable)[1]
DataTable<-DataTable[1:(n-1),]
head(table_lag1)
head(DataTable)
DataTable <- na.omit(read.csv("AllCoinHourly.csv", header = TRUE))
colnames(DataTable) <- c("Time", "BTC", "ETH", "LTC", "XRP")
# fitting vs. validation data
fitsize = 6000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
valData <- na.omit(DataTable[fitsize+1:valsize,])
##Try to plot based on xreg of other coins
##Create lag_1 sets
table_lag1 <- lag(DataTable$ETH,k=1)
head(table_lag1)
tail(table_lag1)
##Try to plot based on xreg of other coins
##Create lag_1 sets
table_lag1 <- na.omit(read.csv("AllCoin_ETHLag.csv", header = TRUE))
head(table_lag1)
#Split into train and test
fitsize = 6000
valsize = dim(table_lag1)[1] - fitsize
fitData <- table_lag1[1:fitsize,]
valData <- na.omit(table_lag1[fitsize+1:valsize,])
y_time_series <- ts(fitData$ETH)
resultBTC <- auto.arima(y_time_series, xreg = fitData$BTC)
resultBTC
plot(forecast(resultBTC$fitted, h = valsize))
points(DataTable$ETH, pch = 20, col = 'green')
head(table_lag1)
table_lag1 <- table_lag1[-1,]
head(table_lag1)
#Split into train and test
fitsize = 6000
valsize = dim(table_lag1)[1] - fitsize
fitData <- table_lag1[1:fitsize,]
valData <- na.omit(table_lag1[fitsize+1:valsize,])
y_time_series <- ts(fitData$ETH)
resultBTC <- auto.arima(y_time_series, xreg = fitData$BTC)
resultBTC
resultLTC <- auto.arima(y_time_series, xreg = fitData$LTC)
resultLTC
#XRP
resultXRP <- auto.arima(y_time_series, xreg = fitData$XRP)
resultXRP
plot(forecast(resultXRP$fitted, h = valsize))
points(DataTable$ETH, pch = 20, col = 'green')
#BTC + LTC
resultLTCBTC <- auto.arima(y_time_series, xreg = fitData$LTC + fitData$BTC)
resultLTCBTC
plot(forecast(resultLTCBTC$fitted, h = valsize))
points(DataTable$ETH, pch = 20, col = 'green')
#LTC + XRP
resultLTCXRP <- auto.arima(y_time_series, xreg = fitData$LTC + fitData$XRP)
resultLTCXRP
#LTC + XRP
resultLTCXRP <- auto.arima(y_time_series, xreg = log(fitData$LTC) + log(fitData$XRP)
#LTC + XRP
resultLTCXRP <- auto.arima(y_time_series, xreg = log(fitData$LTC) + log(fitData$XRP))
#LTC + XRP
resultLTCXRP <- auto.arima(y_time_series, xreg = log(fitData$LTC) + log(fitData$XRP))
resultLTCXRP
#LTC + XRP
resultLTCXRP <- auto.arima(log(y_time_series), xreg = log(fitData$LTC) + log(fitData$XRP))
resultLTCXRP
#LTC + XRP
resultLTCXRP <- auto.arima(y_time_series, xreg = fitData$LTC + fitData$XRP)
resultLTCXRP
#LTC + XRP
resultBTCXRP <- auto.arima(y_time_series, xreg = fitData$BTC + fitData$XRP)
resultBTCXRP
#BTC + LTC
resultLTCBTC <- auto.arima(y_time_series, xreg = fitData$LTC * fitData$BTC)
resultLTCBTC
plot(forecast(resultLTCBTC$fitted, h = valsize))
#All
resultAll <- auto.arima(y_time_series, xreg = fitData$BTC + fitData$XRP + fitData$LTC)
resultAll
#All
resultAll <- auto.arima(y_time_series, xreg = fitData$XRP + fitData$LTC + fitData$BTC)
resultAll
resultBTC
DataTable <- na.omit(read.csv("AllCoinHourly.csv", header = TRUE))
colnames(DataTable) <- c("Time", "BTC", "ETH", "LTC", "XRP")
# fitting vs. validation data
fitsize = 6000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
valData <- na.omit(DataTable[fitsize+1:valsize,])
ETHarima <- auto.arima(fitData$ETH)
ETHarima
y_time_series <- ts(fitData$ETH)
resultBTC <- auto.arima(y_time_series, xreg = fitData$BTC)
resultBTC
plot(forecast(resultBTC$fitted, h = valsize))
points(DataTable$ETH, pch = 20, col = 'green')
#Split into train and test
fitsize = 6000
valsize = dim(table_lag1)[1] - fitsize
fitData <- table_lag1[1:fitsize,]
valData <- na.omit(table_lag1[fitsize+1:valsize,])
y_time_series <- ts(fitData$ETH)
resultBTC <- auto.arima(y_time_series, xreg = fitData$BTC)
resultBTC
plot(forecast(resultBTC$fitted, h = valsize))
points(DataTable$ETH, pch = 20, col = 'green')
#Trying several sizes of validation sets and comparing predictive ability
fitsize = 9000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
valData <- na.omit(DataTable[fitsize+1:valsize,])
ETHarima2 <- auto.arima(fitData$ETH)
ETHarima2
# fitting vs. validation data
fitsize = 6000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
valData <- na.omit(DataTable[fitsize+1:valsize,])
ETHarima <- auto.arima(fitData$ETH)
ETHarima
##11/1 split
fitsize = 11000
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
valData <- na.omit(DataTable[fitsize+1:valsize,])
ETHarima3 <- auto.arima(fitData$ETH)
ETHarima3
DataTable$BTC <- log(DataTable$BTC)
DataTable <- na.omit(read.csv("AllCoinHourly.csv", header = TRUE))
colnames(DataTable) <- c("Time", "BTC", "ETH", "LTC", "XRP")
DataTable$BTC <- log(DataTable$BTC)
DataTable$LTC <- log(DataTable$LTC)
DataTable$ETH <- log(DataTable$ETH)
DataTable$XRP <- log(DataTable$XRP)
plot(DataTable$BTC)
plot(DataTable$LTC)
plot(DataTable$ETH)
plot(DataTable$XRP)
plot(DataTable$BTC, type = 'l', col = 'black')
plot(DataTable$ETH, type = 'l', col = 'red')
plot(DataTable$LTC, type = 'l', col = 'blue')
plot(DataTable$XRP, type = 'l', col = 'green')
points(DataTable$ETH, pch = 20, col = 'green')
plot(DataTable$BTC, type = 'l', col = 'black')
points(DataTable$ETH, pch = 20, col = 'green')
points(DataTable$ETH*2, pch = 20, col = 'green')
points(DataTable$ETH*1.5, pch = 20, col = 'green')
points(DataTable$ETH*1.15, pch = 20, col = 'green')
par(nrow(2,2))
par(mfrow=c(2,2))
plot(DataTable$BTC, type = 'l', col = 'black')
plot(DataTable$ETH, type = 'l', col = 'red')
plot(DataTable$LTC, type = 'l', col = 'blue')
plot(DataTable$XRP, type = 'l', col = 'green')
par(mfrow=c(2,2))
plot(DataTable$BTC, type = 'l', col = 'black', main = "Bitcoin")
plot(DataTable$ETH, type = 'l', col = 'red', main = "Ethereum")
plot(DataTable$LTC, type = 'l', col = 'blue', main = "Litecoin")
plot(DataTable$XRP, type = 'l', col = 'green', main = "Ripple")
acf(DataTable$BTC, lag.max = 2000)
acf(DataTable$ETH, lag.max = 2000)
acf(DataTable$LTC, lag.max = 2000)
acf(DataTable$XRP, lag.max = 2000)
adf.test(DataTable$BTC)
adf.test(DataTable$ETH)
adf.test(DataTable$LTC)
adf.test(DataTable$XRP)
# fitting vs. validation data
fitsize = .85*dim(DataTable)[1]
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
valData <- na.omit(DataTable[fitsize+1:valsize,])
#Bitcoin
BTCarima <- auto.arima(fitData$BTC)
BTCarima
plot(forecast(BTCarima$fitted, h = valsize), main = "Bitcoin Forecasts from ARIMA(2,1,3)")
points(DataTable$BTC, pch = 20, col = 'green')
points(DataTable$BTC, pch = 20, col = 'purple')
points(DataTable$BTC, pch = 20, col = 'red')
points(DataTable$BTC, pch = 10, col = 'red')
points(DataTable$BTC, pch = 40, col = 'red')
points(DataTable$BTC, pch = 1, col = 'red')
acf(BTCarima$residuals)
plot(forecast(BTCarima$fitted, h = valsize), main = "Bitcoin Forecasts from ARIMA(2,1,3)")
points(DataTable$BTC, pch = 1, col = 'red')
plot(forecast(BTCarima$fitted, h = valsize), main = "Bitcoin Forecasts from ARIMA(2,1,3)")
points(DataTable$BTC, pch = 2, col = 'red')
par(mfrow=c(2,2))
plot(forecast(BTCarima$fitted, h = valsize), main = "Bitcoin Forecasts from ARIMA(2,1,3)")
points(DataTable$BTC, pch = 20, col = 'red')
par(mfrow = c(1,1))
acf(BTCarima$residuals)
par(mfrow = c(2,2))
plot(forecast(BTCarima$fitted, h = valsize), main = "Bitcoin Forecasts from ARIMA(2,1,3)")
points(DataTable$BTC, pch = 20, col = 'red')
#LiteCoin
LTCarima <- auto.arima(fitData$LTC)
LTCarima
plot(forecast(LTCarima$fitted, h = valsize), main = "Litecoin Forecasts from ARIMA(3,1,3)")
points(DataTable$LTC, pch = 20, col = 'green')
#Ethereum
ETHarima <- auto.arima(fitData$ETH)
ETHarima
plot(forecast(ETHarima$fitted, h = valsize), main = "Ethereum Forecasts from ETS(2,1,2)")
points(DataTable$ETH, pch = 20, col = 'blue')
#Ripple
XRParima <- auto.arima(fitData$XRP)
XRParima
plot(forecast(XRParima$fitted, h = valsize), main = "Ripple Forecasts from ARIMA(0,1,3)")
points(DataTable$XRP, pch = 20, col = 'orange')
plot(forecast(BTCarima$fitted, h = valsize), main = "Bitcoin Forecasts from ARIMA(2,1,3)")
points(DataTable$BTC, pch = 20, col = 'red')
plot(forecast(LTCarima$fitted, h = valsize), main = "Litecoin Forecasts from ARIMA(3,1,3)")
points(DataTable$LTC, pch = 20, col = 'green')
plot(forecast(ETHarima$fitted, h = valsize), main = "Ethereum Forecasts from ARIMA(2,1,2)")
points(DataTable$ETH, pch = 20, col = 'blue')
plot(forecast(XRParima$fitted, h = valsize), main = "Ripple Forecasts from ARIMA(0,1,3)")
points(DataTable$XRP, pch = 20, col = 'orange')
#Bitcoin
BTC_lag1 <- na.omit(read.csv("AllCoin_BTCLag.csv", header = TRUE))
BTC_lag1 <- BTC_lag1[-1,]
head(BTC_lag1)
tail(BTC_lag1)
BTC_lag1$BTC <- log(BTC_lag1$BTC)
BTC_lag1$LTC <- log(BTC_lag1$LTC)
BTC_lag1$ETH <- log(BTC_lag1$ETH)
BTC_lag1$XRP <- log(BTC_lag1$XRP)
#Split into train and test
fitsize = .85*dim(DataTable)[1]
valsize = dim(BTC_lag1)[1] - fitsize
#Split into train and test
fitsize = .85*dim(BTC_lag1)[1]
valsize = dim(BTC_lag1)[1] - fitsize
fitBTC <- BTC_lag1[1:fitsize,]
valBTC <- na.omit(BTC_lag1[fitsize+1:valsize,])
y_time_series <- ts(fitBTC$BTC)
resultBTC_ETH <- auto.arima(y_time_series, xreg = fitData$ETH)
resultBTC_ETH
plot(forecast(resultBTC_ETH$fitted, h = valsize))
points(BTC_lag1$BTC, pch = 20, col = 'green')
#Litecoin
resultBTC_LTC <- auto.arima(BTC_time_series, xreg = fitData$LTC)
#Ethereum
BTC_time_series <- ts(fitBTC$BTC)
#Litecoin
resultBTC_LTC <- auto.arima(BTC_time_series, xreg = fitData$LTC)
resultBTC_LTC
#Ripple
resultBTC_XRP <- auto.arima(BTC_time_series, xreg = fitData$XRP)
resultBTC_XRP
plot(BTCarima$fitted)
plot(BTCarima$fitted, main = "Bitcoin Forecasts from ARIMA(Black) and Residuals(Red)")
?points
points(BTCarima$residuals, pch = 20, col = 'red')
#All permutations were simply substituted in above
figure <- ggplot()
figure <- figure + geom_point(data=BTCarima$fitted)
figure <- figure + geom_line(data=BTCarima$fitted)
figure <- figure + ggtitle("Bond Yields vs. Time") + xlab("Time") + ylab("Bond Yield")
print (figure)
DataTable <- na.omit(read.csv("AllCoinHourly.csv", header = TRUE))
colnames(DataTable) <- c("Time", "BTC", "ETH", "LTC", "XRP")
DataTable$BTC <- log(DataTable$BTC)
DataTable$LTC <- log(DataTable$LTC)
DataTable$ETH <- log(DataTable$ETH)
DataTable$XRP <- log(DataTable$XRP)
# fitting vs. validation data
fitsize = .85*dim(DataTable)[1]
valsize = dim(DataTable)[1] - fitsize
fitData <- DataTable[1:fitsize,]
valData <- na.omit(DataTable[fitsize+1:valsize,])
#All permutations were simply substituted in above
figure <- ggplot()
figure <- figure + geom_point(data=BTCarima, aes(fitData$Time, BTCarima$fitted))
figure <- figure + geom_point(aes(fitData$Time, BTCarima$fitted))
figure <- figure + geom_line(aes(fitData$Time, BTCarima$fitted))
print (figure)
#All permutations were simply substituted in above
fitData$Time
figure <- ggplot()
#All permutations were simply substituted in above
?plot
#All permutations were simply substituted in above
?plot
#All permutations were simply substituted in above
?ggplot
plot(BTCarima$fitted, main = "Bitcoin Forecasts from ARIMA(Black) and Residuals(Red)")
points(BTCarima$residuals*2, pch = 20, col = 'red')
points(BTCarima$residuals*4, pch = 20, col = 'red')
BTCarima$residuals
.85*dim(DataTable)
BTCarima$residuals[11020:]
BTCarima$residuals[11020:-1,]
BTCarima$residuals[11020:12666,]
BTCarima$residuals[11020:12666]
points(DataTable$BTC - BTCarima$fitted, pch = 20, col = 'red')
DataTable$BTC - BTCarima$fitted
len(BTCarima)
length(BTCarima)
nrow(BTCarima)
dim(BTCarima)
dim(BTCarima$fitted)
length(BTCarima$fitted)
dim(DataTable)
forecast(resultBTC$fitted, h = valsize
forecast(resultBTC$fitted, h = valsize)
forecast(resultBTC$fitted, h = valsize)
points(valData$BTC - forecast(resultBTC$fitted, h = valsize), pch = 20, col = 'red')
valData$BTC - forecast(resultBTC$fitted, h = valsize)
valData$BTC
forecast(resultBTC$fitted, h = valsize)
fcast <- forecast(resultBTC$fitted, h = valsize)
points(fcast$residuals, pch = 20, col = 'red')
fcast$residuals
fcast$fitted
fcast <- forecast(BTCarima$fitted, h = valsize)
fcast$fitted
points(valData$BTC - fcast$fitted, pch = 20, col = 'red')
length(fcast$fitted)
